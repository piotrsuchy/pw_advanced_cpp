@startuml

' ==========================
'  Klasy i relacje
' ==========================

' Główna klasa gry, która zarządza rozgrywką
class Game {
    + run()
    + processEvents()
    + update(deltaTime : float)
    + render()
    --
    - scene : InGameScene
}

' Klasa reprezentująca tryb rozgrywki
class InGameScene {
    + handleEvent(event : sf::Event)
    + update(deltaTime : float)
    + render(window : sf::RenderWindow)
    --
    - maze : Maze
    - entities : vector<Entity*>
    - player : Player
    - ghosts : vector<Ghost>
    - networkManager : NetworkManager
}

' Klasa reprezentująca planszę gry
class Maze {
    + isWall(tileX : int, tileY : int) : bool
    + hasPellet(tileX : int, tileY : int) : bool
    + hasPowerPellet(tileX : int, tileY : int) : bool
    + eatPellet(tileX : int, tileY : int)
    + tileToWorld(tileX : int, tileY : int) : sf::Vector2f
    + worldToTile(x : float, y : float) : sf::Vector2i
    --
    - tiles : vector<vector<int>>
    - TILE_SIZE : float
}

' Klasa bazowa dla obiektów dynamicznych
abstract class Entity {
    + update(deltaTime : float)
    + render(window : sf::RenderWindow)
    + onCollision(other : Entity)
    + getPosition() : sf::Vector2f
    + setPosition(pos : sf::Vector2f)
    + getBounds() : sf::FloatRect
    --
    # position_ : sf::Vector2f
    # velocity_ : sf::Vector2f
}

' Gracz (Pac-Man)
class Player {
    + Player(startPos : sf::Vector2f)
    + update(deltaTime : float)
    + render(window : sf::RenderWindow)
    + onCollision(other : Entity)
    + addScore(points : int)
    + setDirection(dir : Direction)
    --
    - score_ : int
    - isPoweredUp_ : bool
    - powerUpTimer_ : float
}

' Duch (przeciwnik)
class Ghost {
    + Ghost(startPos : sf::Vector2f)
    + update(deltaTime : float)
    + render(window : sf::RenderWindow)
    + onCollision(other : Entity)
    + setFrightened(isFrightened : bool)
    --
    - isFrightened_ : bool
    - frightenedTimer_ : float
}

' Pellet (kuleczka do zebrania)
class Pellet {
    + Pellet(pos : sf::Vector2f, isPower : bool)
    + update(deltaTime : float)
    + render(window : sf::RenderWindow)
    + onCollision(other : Entity)
    + isPowerPellet() : bool
    --
    - isPowerPellet_ : bool
}

' Klasa odpowiedzialna za synchronizację stanu gry (tryb wieloosobowy)
class NetworkManager {
    + initializeServer(port : unsigned short) : bool
    + initializeClient(address : string, port : unsigned short) : bool
    + update(deltaTime : float)
    + sendPlayerState(playerId : int, x : float, y : float, score : int)
    --
    - isServer_ : bool
    - listener_ : sf::TcpListener
    - socket_ : sf::TcpSocket
    - clients_ : map<int, sf::TcpSocket*>
    - messageQueue_ : queue<sf::Packet>
}

' ==========================
'  Dziedziczenie i relacje
' ==========================

Entity <|-- Player
Entity <|-- Ghost
Entity <|-- Pellet

InGameScene -> Maze : uses
InGameScene -> NetworkManager : uses

Game -> InGameScene : manages

@enduml
